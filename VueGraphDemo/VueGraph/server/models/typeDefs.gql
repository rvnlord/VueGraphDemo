type User {
	_id: ID
	userName: String!
	email: String!
	password: String!
	avatar: String
	joinDate: String
	favorites: [Post]
}

type Post {
    _id: ID
	title: String!
	imageUrl: String!
	categories: [String]!
	description: String!
	createdDate: String
	likes: Int
	createdBy: User!
	messages: [Message]
}

type Message {
	_id: ID
	messageBody: String!
	messageDate: String
	messageUser: User!
}

type Token {
	token: String!
}

type Mutation {
	addPost(
		title: String!
		imageUrl: String!
		categories: [String]!
		description: String!
		creatorId: ID!
	): Post!
	addPostMessage(messageBody: String!, userId: ID!, postId: ID!): Message!
	signinUser(userName: String!, password: String!): Token
	signupUser(userName: String!, email: String!, password: String!): Token
	likePost(postId: ID!, userName: String!): LikesFaves!
    unlikePost(postId: ID!, userName: String!): LikesFaves!
	updateUserPost(postId: ID!, userId: ID!, title: String!, imageUrl: String!, categories: [String]!, description: String!): Post!
	deleteUserPost(postId: ID!): Post!
}

type PostsPage {
    posts: [Post],
    hasMore: Boolean
}

# Likes for Post / Favorites for User
type LikesFaves {
  likes: Int
  favorites: [Post]
}

type Query {
    getCurrentUser: User
    getPosts: [Post]
	getUserPosts(userId: ID!): [Post]
	getPost(postId: ID!): Post!
	searchPosts(searchTerm: String): [Post]
    infiniteScrollPosts(pageNum: Int!, pageSize: Int!): PostsPage
}
